<<<<<<< refs/remotes/upstream/main
[["index.html", "R Kurs Unterlagen 1 Über dieses Buch", " R Kurs Unterlagen Anna-Lena Schubert, Jan Goettmann, Jose Carlos Garcia Alanis, Meike Steinhilber, Cordula Hunt, Florian Kobylka 2021-10-13 1 Über dieses Buch TEXT "],["einführung.html", "2 Einführung", " 2 Einführung (Anna-Lena) "],["datenstruktur.html", "3 Datenstruktur 3.1 RMarkdown 3.2 Hilfe 3.3 Werte &amp; Vektoren 3.4 Der Workspace 3.5 Einfache Berechnungen 3.6 Matrizen 3.7 tidy Daten 3.8 data.frames (df) und tibbles (tib) 3.9 Einlesen und Speichern von Daten 3.10 Datensätze (dat) anschauen 3.11 Einführung in Dplyr und tidyverse 3.12 Dplyr: Die wichtigsten Befehle 3.13 Übung 1 3.14 Dplyr: Der Piping Operator 3.15 Beispiel 3.16 Übung 2 3.17 Dplyr : Neue Variablen mit mutate() berechnen 3.18 Beispiel 3.19 Aufgabe bis zum nächsten Mal", " 3 Datenstruktur Thema Inhalte RMarkdown Titel, Chunks, knitten Hilfe help-Fenster, ?, #was passiert hier Werte, Vektoren &amp; Listen chr, num, log, c(), list(), typeof(), coercion, Abruf von Elementen, list(list()) Workspace rm(), Besen Berechnungen mit Values, Vektoren, Funktionen, z-Standardisierung Matrizen matrix(), Indizierung tidy Daten Zeilen: Beobachtungen, Spalten: Variablen tidyverse Installation und library (package) data.frame &amp; tibble Unterschiede, as.data.frame(), as_tibble(), $, [], Zugriff auf Elemente, Reihennamen, Faktoren Daten laden &amp; speichern Import per klick, read./_, sep=, dec=, .xlsx, .svs, write_csv() Daten anschauen View(), head(), str(), count() 3.1 RMarkdown Das R Markdown Skript ist ein besonderes Dateiformat für R Skripte. Es enthält Fließtext und eingebetteten R Code: Knittet man dies Skript mit dem Wollknäul Button (5.) in der oberen Leiste, integriert es den ausgeführten Code mit dem Fließtext und druckt ein übersichtliches Dokument (html, pdf, txt oder doc). Das ist praktisch um z.B. Auswertungsergebnisse zu präsentieren. Im Header werden Titel und Dokumententyp für das Ausgabe-Dokument festgelegt Die Code Blöcke (Chunks) sind mit je drei rückwärts gestellten Hochkommata (Backticks) am Anfang und Ende des Chunks eingerahmt. Werden sie vom R Markdown Skript als solche erkannt, wird auch die Hintergrundfarbe automatisch abgeändert. Im ersten chunk sollten globale Chunk Optionen festgelegt, alle notwendigen Packages geladen und die Daten eingelesen werden. Den Fließtext kann man mit Überschriften (#) und Unterüberschriften (##) strukturieren, im Code kennzeichnet # Kommentare Zu Beginn eines Chunks muss man innerhalb einer geschwungenen Klammer spezifizieren(```{}): Es ist möglich Code von anderen Programmiersprachen (z.B. Python oder TeX) einzubetten, standard ist r (optional) Nach einem Leerzeichen: Einzigartiger Chunk-Name (optional) Nach einem Komma: Befehle, um die Ausgabe des Chunks in das neue Dokument zu steuern: include = FALSE Weder Code noch Ergebnis erscheinen echo = FALSE Nur das Code-Ergebnis erscheint message = FALSE Nachrichten zum Code erscheinen nicht warning = FALSE Warnungenzum Code erscheinen nicht fig.cap = \"...\" Hiermit lassen sich Grafiken beschriften 3.2 Hilfe Sie merken, dass die Befehle und Funktionen zum Teil sehr spezifisch und Sie sich kaum alles behalten können. Am wichtigsten ist die Reihenfolge und Vollständigkeit der Zeichen: vergessen Sie ein Komma, ein Backtick oder eine Klammer zu, dann kann R den Code schon nicht interpretieren. Zum Glück erkennt R Studio das oft und weist einen darauf während des Codens mit einem roten x neben der Zeilennummer hin. Andernfalls dürfen Sie versuchen, die Fehlermeldung beim Ausführen zu verstehen. Wenn Sie den Namen einer Funktion oder eines Packages nicht direkt erinnern, können Sie den Anfang des Namens im Chunk oder in der Console eingeben, RStudio bietet einem nach einem kurzen Moment eine Liste möglicher Optionen an, aus der Sie wählen können. Haben Sie eine Funktion gewählt, können sie die Tab-Taste drücken und es werden die verschiedenen Funktionsargumente angezeigt, um die Funktion zu spezifizieren, was oft sehr hilfreich ist. Möchten Sie wissen, was eine Funktion macht oder in welcher Reihenfolge die Funktionsargumente eingegeben werden, können Sie ?FUN in die Console eintippen, wobei FUN Platzhalter für den Funktionsnamen ist. Alternativ können Sie im Help-tab unten rechts suchen. Die Dokumentation ist oft sehr ausführlich. Die Möglichkeit einschlägige Suchmaschinen im Internet zu verwenden ist fast zu trivial, um sie hier aufzuführen, oft werden Sie dabei auf StackOverflow weitergeleitet. Auf Englisch gestellte Fragen oder Probleme führen zu besseren Treffern. Noch trivialer ist es, im Skript des Kurses oder im eigenen Code nachzuschauen. Falls Sie gründlich nachlesen möchten, gibt es auch ganze Bücher, die einem eine Einführung in R geben: z.B. R Cookbook oder R for Data Science. 3.3 Werte &amp; Vektoren Datenformate in R sind von einfach zu komplex: Value, Vektor, matrix, (array), data.frame,tibble und list. Die kleinste Objekteinheit in R ist ein Value. Es gibt unterschiedliche Typen von Values: Text, bzw. Charakter (chr), manchmal auch String genannt, (komplexe Zahlen, cmplx) Nummer (num), bzw.double (ganze Zahlen, integer int genannt) logische Werte (logi), manchmal auch Boolean genannt fehlende Werte (NA), Not Available Sie weisen einem Objektnamen einen Wert per &lt;- zu (Shortkey:ALT&amp;-), der Datentyp des Values wird automatisch Rkannt. var1 &lt;- &quot;kreativ&quot; # typ chr var2 &lt;- 3.5 # typ num var3 &lt;- TRUE # typ logi Mit der Funktion typeof() können sie sich den Datentypen anzeigen lassen. Vektoren reihen Werten desselben Datentyps auf c(Wert1, Wert2, ...): vec1 &lt;- c(3, 6, 3.4) # c() kombiniert die Werte zu einem Vektor, der dem Namen zugewiesen wird Fassen Sie Werte von verschiedenen Typen zu einem Vektor zussammen, werden beide Werte zum Typen mit der kleineren Typenzahl umgewandelt (coercion). c(&quot;kreativ&quot;,3.5) # ich versuche ein `chr` und eine `num` zu einem Vektor zu kombinieren ## [1] &quot;kreativ&quot; &quot;3.5&quot; 3.5 wird in \"\" ausgegeben, die Nummer wurde zu Text. 3.3.1 Coercion (Umwandlung von Typen) Sie können den Datentypen auch per Funktion ändern, z.B. as.character(), as.double(): as.character(c(1, TRUE, &quot;abc&quot;, 4.1627)) # Verändert eine Reihe von Werten zum Typ chr ## [1] &quot;1&quot; &quot;TRUE&quot; &quot;abc&quot; &quot;4.1627&quot; as.double(c(2, TRUE, &quot;abc&quot;, 4.1627)) # Verändert die Werte zum Typ double, geht es nicht, erscheinen NAs ## Warning: NAs durch Umwandlung erzeugt ## [1] 2.0000 NA NA 4.1627 Coercion gibt es auch in Matrizen, Arrays (Mehrdimensionale Matrizen) und in Spaltenvektoren von Datensätzen (data.frames und tibbles). Nur Listen können verschiedene Datentypen und Elemente enthalten list(Element1, Element2, ...). Das geht soweit, dass Listen selbst Listen enthalten können. 3.3.2 Aufruf einzelner Elemente per Index: Um auf Elemente zuzugreifen, können Sie deren Indexnummer verwenden: vec_4 &lt;- c(1,3,3,7) #Definition des Vektors vec_4[2] #Abruf des zweiten Elements des Vektors ## [1] 3 Das geht sogar in verschachtelten Listen: mylist &lt;- list(list(1,&quot;a&quot;),c(2,3)) # Definiert eine Liste aus Liste &amp; Vector, die je aus 2 Elementen bestehen mylist[[1]][2] # Ruft Element 1 der äußeren Liste: (1,&quot;a&quot;), und davon Element 2 ab: &quot;a&quot; ## [[1]] ## [1] &quot;a&quot; Ich habe jetzt mehrere Variablen (Values, Vektoren, Listen) definiert, sie sind in meinem RStudio im Environment-tab oben rechts aufgetaucht. 3.4 Der Workspace Rechts oben im Fenster ist das Environment-tab. Hier sieht man alle im globale Workspace definierten Objekte (Datenstrukturen: Werte, Vektoren, Matrizen, Arrays, Listen, data.frames, tibbles; und Funktionen) aufgelistet: Per Doppelklick können Sie die Objekte jeweils einzeln oben links im extra Fenster (Datenansicht-tab ) anschauen. rm(Objektname) ist die Funktion zum Entfernen einzelner Objekte aus dem globalen Workspace. Das Besensymbol im Environment-tab oben rechts fegt den globalen Workspace leer. Es ist zu beachten, dass R Markdown beim knitten nicht auf den globalen Workspace zugreift, sondern einen eigenen Workspace aus dem Code in den Chunks erstellt. Beim Ausführen einzelner Chunks per Markieren und STRG/CTRL&amp;Enter oder grüner Pfeil rechts wird jedoch auf den globalen Workspace zugegriffen. Beim Schließen von RStudio werden Sie gefragt, ob Sie den globalen Workspace in die .RData als img speichern lassen, dann stehen die Objekte in der nächsten Sitzung wieder zur Verfügung, solange Sie dieselbe Projektdatei öffnen. Offene Skipte und offene Datenansicht-tabs werden beim Schließen ebenfalls mit der Projektdatei assoziiert. Geladene Packages gehen leider verloren, diese müssen Sie jedes Mal beim Starten von RStudio neu laden: library(Packagename). Deshalb ist es Konvention am Anfang jedes Skriptes erstmal die Packages zu laden. Haben Sie Objekte im Workspace gespeichert, können Sie deren Namen verwenden, um sich auf diese zu beziehen und z.B. weitere Berechnungen vorzunehmen. 3.5 Einfache Berechnungen 3.5.1 Rechnen mit Values x &lt;- 5 # definiert den Wert der Variable x y &lt;- 5 # definiert den Wert der Variable x x + y # Summe von x und y x*y # Produkt von x und y sqrt(x) # Wurzel aus x x**(1/2) # x hoch 0.5 Möchten Sie das Ergebnis speichern, müssen Sie dem berechneten Wert einen Namen zuweisen: z &lt;- x + y # weist dem Namen z das Ergebnis dieser Gleichung zu, &quot;z&quot; erscheint im Workspace 3.5.2 Rechnen mit Vektoren Operationen können häufig vektorisiert, d.h. auf alle Objekte einens Vektors angewendet werden: e &lt;- vec_4 * 5 # multipliziert alle Elemente des Vekors mit 5 und speichert das Ergebnis unter dem Namen e Es gibt eine ganze Reihe vorgefertigter Funktionen, um mit Vektoren zu rechnen: 3.5.3 Übersicht Berechnungsfunktionen Folgende Funktionen können Sie auf num-Vektoren und Matrizen anwenden, je nach Funktion auch auf chr Vektoren oder Datensätze, wobei diese sich dann meist nur auf die Einträge in der oberen Ebene, z.B. auf die Anzahl der Spalten und nicht auf die Spalteneinträge beziehen. Funktion Bedeutung Funktion Bedeutung min(x) Minimum mean(x) Mittelwert max(x) Maximum median(x) Median range(x) Range var(x) Varianz sort(x) sortiert x sd(x) Sta ndardabweichung sum(x) Summe aller Elemente quantile(x) Quantile von x cor(x,y) Korrelation von x und y length() Länge von x 3.5.4 Beispiel einer z-Standardisierung eines Vektors mit 3 Einträgen geschwister &lt;- c(8,4,12) # def. der Variable mw_geschw &lt;- mean(geschwister) # MW mw_geschw ## [1] 8 sd_geschw &lt;- sd(geschwister) # SD sd_geschw ## [1] 4 z_geschw &lt;- (geschwister-mw_geschw)/sd_geschw # z-Standardisierung des Vektors z_geschw ## [1] 0 -1 1 3.6 Matrizen Matrizen sind 2D Datenstrukturen, sie bestehenaus Vektoren gleicher Länge und enthalten einen Datentyp. Mit dem Befehl matrix() können sie erstellt werden: mat &lt;- matrix(NaN, nrow=4, ncol=4) # Eine Matrix mat mit 4 Reihen, 4 Spalten und leeren Einträgen wird erstellt # NaN (Not a Number) ist zwar ein double, aber rechnen kann man damit nicht mat ## [,1] [,2] [,3] [,4] ## [1,] NaN NaN NaN NaN ## [2,] NaN NaN NaN NaN ## [3,] NaN NaN NaN NaN ## [4,] NaN NaN NaN NaN Ich habe eine 4x4 Matrix erstellt, die mit NaNs gefüllt ist. Hätte ich diverse Datentypen zugeordnet, wären diese zum niedrigeren coerced worden. Matrizen können mit matrixname[Zeile,Spalte] manipuliert werden. Beispiel: mat[,1] &lt;- vec_4 # Weil Spalte 1. von mat und vec_4 dieselbe Länge haben, kann ich Spalte 1 neu zuweisen. mat # Dadurch, dass der Eintrag für die Zeilennummer leer ist, beziehe ich mich auf alle Zeilen. ## [,1] [,2] [,3] [,4] ## [1,] 1 NaN NaN NaN ## [2,] 3 NaN NaN NaN ## [3,] 3 NaN NaN NaN ## [4,] 7 NaN NaN NaN mat[,2] &lt;- 8 # Wird einem Bereich ein einzelner Wert zugeordnet, wird dieser vervielfacht (wie oben bei NaN) mat ## [,1] [,2] [,3] [,4] ## [1,] 1 8 NaN NaN ## [2,] 3 8 NaN NaN ## [3,] 3 8 NaN NaN ## [4,] 7 8 NaN NaN mat[,3] &lt;- c(FALSE, TRUE) # Wird eine ganzzahlige Teilmenge (2 von 4) zugewiesen, wird diese vervielfacht mat # Anm.: das nennt sich recyclen, ## [,1] [,2] [,3] [,4] ## [1,] 1 8 0 NaN ## [2,] 3 8 1 NaN ## [3,] 3 8 0 NaN ## [4,] 7 8 1 NaN Coercion: TRUE wurde zu 1 und FALSE wurde zu 0. Wenn man nun eine bestimmte Spalte oder Zeile sehen möchte, kann man dies über die Indizierung tun, hierbei kann man sich beliebig austoben. mat[,1] # Ich möchte nur die erste Spalte über alle Zeilen ausgeben ## [1] 1 3 3 7 mat[1,1] # Nur den ersten Wert der ersten Spalte ## [1] 1 Hier wird es turbulent: mat[c(1,3),] # Nur Zeile 1 und 3 von allen Spalten ## [,1] [,2] [,3] [,4] ## [1,] 1 8 0 NaN ## [2,] 3 8 0 NaN mat[-1,2:4] # Nicht Zeile 1 und Spalten 2-4 ## [,1] [,2] [,3] ## [1,] 8 1 NaN ## [2,] 8 0 NaN ## [3,] 8 1 NaN Da ich jetzt Bereiche der Matrix auswählen kann, lohnt es sich Berechnungen vorzunehmen (mat[,2]+mat[,1])*mat[,3] # Spalte 2 minus Spalte 1 und dann mal Spalte 3 ## [1] 0 11 0 15 Es sind immer noch nicht angegebene Nummernwerte in der Matrix, solange ich mich beim Berechnen auf Bereiche der Matrix beschränke, die vergebene numerische Werte haben, gibt es kein Problem, ansonsten schon: mat[1,] # Zeile 1 ## [1] 1 8 0 NaN sum(mat[1,]) # Summe über Zeile 1 mit NaN ## [1] NaN Die Summe kann nicht berechnet werden. Zum Auslassen der NaNs wird das Funktionsargument na.rm=TRUE verwendet: sum(mat[1,], na.rm=TRUE) # Summe über Zeile 1 ohne NaN ## [1] 9 mean(mat, na.rm=TRUE) # MW der Matrix ohne NaN ## [1] 4 Nun, da wir mit dem Rechnen in Matrizen vertraut sind möchte ich die letzte Spalte mit Einträgen füllen: typeof(mat) # gebe den Typ der Einträge der Matrix aus ## [1] &quot;double&quot; mat_sav &lt;- mat # in weiser Voraussicht speichere ich die bisherige Matrix unter anderem Namen mat[,4] &lt;- c(&quot;coercion&quot;,&quot;kann&quot;,&quot;nervig&quot;,&quot;sein&quot;) # weise Spalte 4 einen Vektor mit chr Einträgen zu mat ## [,1] [,2] [,3] [,4] ## [1,] &quot;1&quot; &quot;8&quot; &quot;0&quot; &quot;coercion&quot; ## [2,] &quot;3&quot; &quot;8&quot; &quot;1&quot; &quot;kann&quot; ## [3,] &quot;3&quot; &quot;8&quot; &quot;0&quot; &quot;nervig&quot; ## [4,] &quot;7&quot; &quot;8&quot; &quot;1&quot; &quot;sein&quot; typeof(mat) ## [1] &quot;character&quot; Konnte ich eben noch den Mittelwert einer Spalte bilden, so geht das jetzt nicht mehr, da alle Einträge der Matrix zu chr coerced wurden. In einem typischen Datensatz sind aber Variablen verschiedener Typen (num und chr) enthalten. Dieses Problem ließe sich mit Listen lösen, welche aber unübersichtlich sind. Datensätze bestehen manchmal aus unüberschaubar vielen Einträgen und deshalb müssen sie übersichtlich strukturiert sein. 3.7 tidy Daten Es gibt eine Konvention dafür, wie man Datensätze, die mehreren Beobachtungseinheiten (Fällen) verschiedene Parameter (Variablen) zuordnet. Wichtig für die eigene strukturierte Arbeit ist in erster Linie Konsistenz, z.B. dass Sie bei Variablennamen aus mehreren Wörtern immer den Unterstrich als Trennzeichen verwenden. Es hat sich als überlegen für die Auswertung von Daten herausgestellt, Fälle in Zeilen und Variablen in Spalten einzuordnen, dieses Prinzip dürfte Einigen schon von SPSS bekannt sein. Variable1 Variable2 Was ist tidy data? Fall1 Wert11 Wert12 Eine Zeile pro Beobachtung Fall2 Wert21 Wert22 Eine Spalte pro Variable Fall3 Wert31 Wert32 Eine Tabelle pro Untersuchung Fall4 Wert41 Wert42 eindeutige Namen Fall5 Wert51 Wert52 Konsistenz Fall6 Wert61 Wert62  Es gibt noch weitere Regeln für konsistentes und ordentliches Arbeiten in R und mit Datensätzen im Allgemeinen, z.B. dass man keine Farbcodierungen verwenden sollte. Vorerst genügt es, wenn Sie sich an die Basics hier halten. Diese Art Daten zu strukturieren lässt sich im data.frame und noch besser im tibble umsetzen: Beides sind Tabellen mit Spaltenvektoren, die jeweils verschiedene Datentypen enthalten können. Deswegen stellen beide das bevorzugte und für unsere Zwecke wichtigste Datenformat dar. 3.7.1 tidyverse Bevor wir uns dem schönsten Datenformat, den tibbles widmen, müssen wir das entsprechende Package einmalig in der Console installieren. Ich habe den Code auskommentiert, weil das Package bei mir bereits installiert ist: #install.packages(&quot;tidyverse&quot;) # R kennt den Namen noch nicht, deswegen &quot;&quot; Das Package tidyverse enthält eine Reihe nützlicher Packages, die eine saubere Datenverarbeitung zum Ziel haben. Packages müssen bei jeder Sitzung neu aktiviert bzw. angehängt werden. Für uns relevante Packages im tidyverse sind tibble, readr, stringr, dplyr, purr und ggplot2. library(tidyverse) # Bitte an den Anfang eines Skriptes, um beim Starten der R Session anzuhängen (attach). 3.8 data.frames (df) und tibbles (tib) Es gibt mehr Gemeinsamkeiten als Unterschiede zwischen beiden Datenformaten. Beides sind Tabellen mit Spaltenvektoren (Variablen), die je verschiedene Datentypen enthalten können. Hier zunächst die Übersicht über die Funktionen zum Managen des Datensatzes: Funktion zum data.frame() tibble() Datenformat konvertieren as.data.frame() as_tibble() Definieren data.frame(var1,) tibble(var1,) Aufrufen des Datensatzes df tib Auswählen einer Variable df$var tib$var Auswählen eines Bereiches df[rowIdx,colIdx] tib[rowIdx,colIdx] Definieren neuer Variablen df$var_neu &lt;- c() tib$var_neu &lt;- c() Reihennamen vergeben row.names(df) &lt;-c(name1,) relocate(tib,var) Sie können die beiden Datensatz-Formate einfach in das jeweils andere konvertieren. Die Definition geht per Formel data.frame() und die Aneinanderreihung der Spaltenvektoren. Es bietet sich an, dabei direkt Namen für die Spaltenvektoren zu vergeben. Für tibbles geht das analog mit der Formeltibble() test_df &lt;- data.frame(&quot;text&quot;=mat[,4] , # Komma zwischen Spaltenvektoren &quot;ist_Verb&quot;=mat_sav[,3]) # verwende die Spaltenvektoren aus den vorherigen Matrizen und weise Namen zu test_df ## text ist_Verb ## 1 coercion 0 ## 2 kann 1 ## 3 nervig 0 ## 4 sein 1 In Bezug auf weitere Funktionen des Packages tidyverse sind tibbles ein wenig praktischer. Große tibbles werden übersichtlicher angezeigt (nur die ersten 10 Zeilen) wenn man sie aufruft. test_tib &lt;- as_tibble(test_df) test_tib ## # A tibble: 4 x 2 ## text ist_Verb ## &lt;chr&gt; &lt;dbl&gt; ## 1 coercion 0 ## 2 kann 1 ## 3 nervig 0 ## 4 sein 1 Einzelne Spalten können ganz einfach aufgerufen werden, in dem man den $-Operator benutzt. Schreibt man diesen direkt hinter den Namen des Datensatzes, klappt automatisch eine Liste mit allen Spalten auf: test_tib$text # Mit dem $-Operator können einzelnen Spalten direkt per Name adressiert werden. ## [1] &quot;coercion&quot; &quot;kann&quot; &quot;nervig&quot; &quot;sein&quot; Es ist auch möglich, mehrere Zeilen und/oder Spalten auszugeben, dies funktioniert wie bei Matrizen per Indexnummer: test_tib[2:4,1] # Die Zeilen 2 bis 4 werden aus Spalte 1 ausgebenen ## # A tibble: 3 x 1 ## text ## &lt;chr&gt; ## 1 kann ## 2 nervig ## 3 sein Die Adressierung einzelner Spalten und Zeilen ermöglicht dann zum Beispiel die Berechnung von Kennwerten nur für einzelnen Spalten. Z.B. kann man die Kosten für Konzertkarten im Jahr 2022 aufsummieren lassen: tickets_2022 &lt;- tibble(&quot;Artist&quot;=c(&quot;Ed Sheeran&quot;, &quot;Billy Ellish&quot;, &quot;The Weeknd&quot;, &quot;Dua Lipa&quot;, &quot;Imagine Dragons&quot;), &quot;Kosten&quot;=c(79.32, 282, 116, 136, 68.71 )) sum(tickets_2022$Kosten) ## [1] 682.03 Der $-Operator wird für fast alle höheren Datentypen verwendet, um auf diese Zuzugreifen. Dies gilt zum Beispiel auch für die meisten Outputs von Funktionen (t-Test, Anova, SEMs) und Listen, es müssen aber wie im tibble Namen für die Listeneinträge vergeben sein: liist_of_things &lt;- list(tibbi = test_tib, # erstellt eine Liste aus diversen Objekten in meinem Workspace ticki = tickets_2022, # den Namen der Listeneinträge werden geschwi = geschwister, # die Objekte aus dem Workspace zugeordnet vari = var1) liist_of_things$geschwi # per $-Operator und Name in der Liste wird der Eintrag gewählt ## [1] 8 4 12 liist_of_things$ticki # Und so die Variable ticki (hier das ticket_2022 tibble) ## # A tibble: 5 x 2 ## Artist Kosten ## &lt;chr&gt; &lt;dbl&gt; ## 1 Ed Sheeran 79.3 ## 2 Billy Ellish 282 ## 3 The Weeknd 116 ## 4 Dua Lipa 136 ## 5 Imagine Dragons 68.7 Theoretisch könnte ich auch noch\\$Artist hinzufügen, dann würde mir nur die erste Spalte des tibbles ausgegeben. Mir fällt auf, ich habe den Namen eine Künstlerin in tickets_2022 falsch geschrieben: tickets_2022$Artist[2] &lt;- &quot;Billy Eilish&quot; # $-Operator und Indexing lassen sich kombinieren Sie können also nicht nur Elemente aus Datensätzen abrufen, sondern diese mit dem &lt;- neu zuweisen. Man kann das $ auch verwenden um neue Spalten in die Datensätze einzufügen: tickets_2022$Priorität &lt;- c(2, 4, 3, 5, 1) # definiert eine neue Spalte im Datensatz tickets_2022$Prioritaet &lt;- tickets_2022$Priorität # besser ae statt ä in Variablennamen tickets_2022 # nun gibt es eine Spalte zu viel ## # A tibble: 5 x 4 ## Artist Kosten Priorität Prioritaet ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Ed Sheeran 79.3 2 2 ## 2 Billy Eilish 282 4 4 ## 3 The Weeknd 116 3 3 ## 4 Dua Lipa 136 5 5 ## 5 Imagine Dragons 68.7 1 1 tickets_2022$Priorität &lt;- NULL # entfernt eine Spalte, vorsichtig hierbei(!) Ein weitere Unterschied zwischen tibbles und data.frames ist, dass tibbles keine Reihennamen kennen. Das vereinfacht das Format. Möchten Sie trotzdem gerne Reihennamen vergeben, dann müssen Sie sich mit einer neuen Variable(z.B. Reihenname) behelfen, die Sie mit relocate(tib,var) an den Anfang des Datensatzes stellen. 3.8.1 Faktoren Vektoren, die kategoriale Einträge enthalten können Sie mit factor() als Faktor zuweisen: Gegut_vec &lt;- c(&quot;m&quot;, &quot;f&quot;, &quot;d&quot;, &quot;f&quot;, &quot;f&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;m&quot;,&quot;m&quot;, &quot;f&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;m&quot;) Gegut_fac &lt;- factor(Gegut_vec) # macht Faktor aus kategorialem Vector und speichert unter Namen Gegut_fac # ruft den Faktor auf: ## [1] m f d f f m f f f m m f m f f m f f f m ## Levels: d f m Es werden die einzelnen Ausprägungen und die möglichen Ausprägungen als Levels ausgegeben. levels() gibt nur die möglichen Ausrägungen eines Faktors aus. Faktoren eignen sich oft besser als Vectoren zum Plotten und Rechnen, deswegen ist es nützlich kategoriale Spaltenvektoren im Datensatz zu Faktoren zu machen. Jetzt, wo Sie mit dem Management von Datensätzen vertraut sind wollen wir vorhandene Datensätze einlesen: 3.9 Einlesen und Speichern von Daten Daten können in R Studio auf unterschiedliche Weise eingelesen werden. Ich habe dieses Bild zur Abwechslung für Ihre Augen erstellt. Es gibt frei verfügbare Datensätze in Packages, z.B. einen Datensatz zu Pinguinen: palmerpenguins. Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/ Nach einmaliger Installation des Packages (install.packages(\"palmerpenguins\") muss es geladen werden: library(palmerpenguins) # jedes Mal beim Durchlaufen des Skripts. Ohne &quot;&quot; pengu &lt;- penguins # penguins ist zwar schon ein tibble, aber Namenszuweisung zum Laden in den Workspace In der Regel werden Sie aber einen selbst erhobenen oder einen aus dem Internet heruntergeladenen Datensatz einlesen wollen. Mein Tipp ist, den Datensatz in das Working Directory zu speichern, dann finden Sie ihn schneller und er ist in der Nähe Ihrer Auswertung, noch eleganter ist es einen Unterordner namens data in den Ordner des Working Directories anzulegen, in den Sie alle Datensätze zu ihrem Projekt speichern können. Im File-tab unten rechts navigieren Sie zu der Datei mit dem Datensatz und dann klicken Sie diese zum Importieren des Datensatzes an (alternativ können Sie im Environment-tab über den Button Import Dataset einen Datensatz zum Importieren auf ihrem Computer suchen). In RStudio erscheint ein Fenster zum Importieren, unten rechts wird der automatisch der dem Dateiformat und unten links angegebenen Optionen entspricht, ggf. werden sogar benötigte Packages geladen. Um einen Datensatz per Code zu importieren sind Dateiformat, die Trennzeichen (sep) und die Dezimalzeichen (dec) besonders relevant. Das Standard-Dateiformat ist .csv, hier sind Kommata Trennzeichen (sep=\",\") und Punkte kennzeichnen Dezimalstellen (dec=\".\"). Sie können die Funktionen read_cvs() oder read_delim() für dieses Dateiformat verwenden, letztere sollte Trenn- und Dezimalzeichen automatisch erkennen. Hier ist eine Übersicht zu den Einlesefunktionen in base R (also ohne zusätzlich geladene Packages) und im tidiverse Package, der Unterschied ist, dass base R Funktionen die Daten in einen data.frame laden, tidyverse Funktionen in ein tibble: Funktion zum sep dec in base R im tidverse autolesen auto . read.delim() read_delim() autolesen auto , read.delim2() read _delim2() lesen von , . read.csv() read_csv() lesen von leer . read.table() read_table() schreiben , . write.csv() write_csv() Wichtigstes und oft einziges Funktionsargument ist der vollständige Dateiname, er wird in \" angegeben. Falls Sie die Datei in einem Unterordner vom Working Directory gespeichert haben, wird den Name des Unterordners mit einem / dem Dateinamen vorangestellt (z.B.data/Datensatz1.csv). Das Einlesen von Daten funktioniert nur, wenn der einzulesende Datensatz per &lt;- einem Namen zugewiesen wird. Beispiel zum Laden eines .csv Datensatzes: socken &lt;- read_delim(&quot;data/socken.csv&quot;) # liest meinen socken.csv Datensatz aus dem Unterordner socken # Daten in ein tibble namens socken ## # A tibble: 2 x 3 ## Stoff Gewicht Bewertung ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Seide 0.03 10 ## 2 Wolle 0.08 9 Excel Dateien werden mit Funktionen read_excel(), read_xls() oder read_xlsx() aus dem Package readxl, SPSS Dateien mit der Funktion read_svs() aus dem Package haven eingelesen. Auch zum Einlesen von SAS, Stata oder anderen Dateiformaten gibt es entsprechende Funktionen. Die Standardfunktion zum Abspeichern von Datensätzen in eine Datei ist write_csv(), bzw. in base R write.csv(), da dieses Dateiformat die beste Kompatibilität mit anderer Software aufweist. Beim Speichern muss man neben dem Dateinamen und ggf. Dateipfad noch den Namen des Datensatzes als erstes Funktionsargument angeben: Es gibt noch ein weiteres erwähnenswertes Dateiformat, das von R selbst: .RDS. Die Funktionen saveRDS() und readRDS() bieten die beste Funktionalität in R. 3.10 Datensätze (dat) anschauen Um sich die geladenen Daten ganz anzuschauen kann man sie im Workspace anklicken, oder deren Namen an die Funktion view(dat) übergeben. head(dat) zeigt einem den Kopf des Datensatzes an, genau genommen die ersten 6 Zeilen: long_tib &lt;- tibble(Person_Id=c(1:20), Gender=Gegut_fac, Eigenschaft=var1) # definiert ein 20 x 3 tibble, head(long_tib) # zeigt die ersten 6 Zeilen jeder Variable an ## # A tibble: 6 x 3 ## Person_Id Gender Eigenschaft ## &lt;int&gt; &lt;fct&gt; &lt;chr&gt; ## 1 1 m kreativ ## 2 2 f kreativ ## 3 3 d kreativ ## 4 4 f kreativ ## 5 5 f kreativ ## 6 6 m kreativ Einen Überlick über die Datenstruktur, inklusive Factor-levels erhält man mit der Funktion str(dat): str(long_tib) # zeigt die Struktur der Daten ## tibble [20 x 3] (S3: tbl_df/tbl/data.frame) ## $ Person_Id : int [1:20] 1 2 3 4 5 6 7 8 9 10 ... ## $ Gender : Factor w/ 3 levels &quot;d&quot;,&quot;f&quot;,&quot;m&quot;: 3 2 1 2 2 3 2 2 2 3 ... ## $ Eigenschaft: chr [1:20] &quot;kreativ&quot; &quot;kreativ&quot; &quot;kreativ&quot; &quot;kreativ&quot; ... Zeile 1 gibt Auskunft über Größe und die Klasse des Objektes, tibbles sind eine Art data.frame. In den weiteren Zeilen werden die Datentypen ggf. Faktorlevel und die ersten Werte angezeigt. Mit der Funktion count(dat,var) lassen sich die Häufigkeiten der Levels eines Faktors ausgeben: count(long_tib, Gender) # zählt im long_tib die Levels des Faktors Gender ## # A tibble: 3 x 2 ## Gender n ## &lt;fct&gt; &lt;int&gt; ## 1 d 1 ## 2 f 12 ## 3 m 7 3.11 Einführung in Dplyr und tidyverse Dplyr ist Teil des tidyverse Packages und ermöglicht es, Daten sehr einfach zu manipulieren und in eine Form zu bringen, um diese dann zu analysieren. Um das zu tun greifen wir auf den Star Wars Datensatz zurück, den das dplyr Package mitliefert: # Lest die Daten bitte ein, der Datensatz heisst &quot;starwars.RDS&quot; und befindet sich in eurem Projektordner, diesmal benutzen wir den readRDS() Befehl. starwars &lt;- readRDS(&quot;starwars.RDS&quot;) Der Datensatz enthält Informationen über unsere Star Wars Helden, ähnlich dem Datensatz, den wir uns in der letzten Sitzung ausgedacht haben: head(starwars,5) # Wir lassen uns erstmal die ersten 5 Zeilen des Datensatzes ausgeben ## # A tibble: 5 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Luke Skywalker 172 77 blond fair blue 19 male mascu~ ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu~ ## 3 R2-D2 96 32 &lt;NA&gt; white, blue red 33 none mascu~ ## 4 Darth Vader 202 136 none white yellow 41.9 male mascu~ ## 5 Leia Organa 150 49 brown light brown 19 fema~ femin~ ## # ... with 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; Bevor wir einsteigen, schaut euch an, wie die einzelnen Variablen im Datensatz verteilt sind. Benutzt dazu den den summary() Befehl, was fällt euch auf ? summary(starwars) ## name height mass hair_color skin_color ## Length:87 Min. : 66.0 Min. : 15.00 none :37 fair :17 ## Class :character 1st Qu.:167.0 1st Qu.: 55.60 brown :18 light :11 ## Mode :character Median :180.0 Median : 79.00 black :13 dark : 6 ## Mean :174.4 Mean : 97.31 white : 4 green : 6 ## 3rd Qu.:191.0 3rd Qu.: 84.50 blond : 3 grey : 6 ## Max. :264.0 Max. :1358.00 (Other): 7 pale : 5 ## NA&#39;s :6 NA&#39;s :28 NA&#39;s : 5 (Other):36 ## eye_color Age sex gender ## brown :21 Min. : 8.00 female :16 feminine :17 ## blue :19 1st Qu.: 35.00 hermaphroditic: 1 masculine:66 ## yellow :11 Median : 52.00 male :60 NA&#39;s : 4 ## black :10 Mean : 87.57 none : 6 ## orange : 8 3rd Qu.: 72.00 NA&#39;s : 4 ## red : 5 Max. :896.00 ## (Other):13 NA&#39;s :44 ## homeworld species ## Length:87 Length:87 ## Class :character Class :character ## Mode :character Mode :character ## ## ## ## 3.12 Dplyr: Die wichtigsten Befehle Filtern von Beobachtungen nach Wert (filter()). Reihen neu Sortieren (arrange()). Auswahl von Variablen nach Name (select()). Erstellen von neuen Variablen aus bereits existierenden (mutate()). Viele Werte zu einem einzelnen Wert zusammenfassen (summarise()). Der vielleicht wichtigste Befehl ist der group_by() Befehl, mit dem Ihr die oben genannten Befehle auf einzelne Gruppen innerhalb eines Datensatzes anwenden könnt. Diese 6 sogennaten Verben bilden die Grundlage für tidyverse.Damit ist es möglichmehrere einfache Schritte miteinander zu verketten, um ein komplexes Ergebnis zu erzielen. Alles Befehle funktionieren auf die gleiche Art und Weise: Das erste Argument ist ein Dataframe. Die nachfolgenden Argumente beschreiben, was mit dem Dataframe geschehen soll, wobei die Variablennamen (ohne Anführungszeichen) verwendet werden. Das Ergebnis ist ein neuer Dataframe Hier ein Beispiel, zum filter() Befehl, dazu müsst ihr auch wissen, wie Ihr die gewünschten Beobachtungen mit Hilfe der Vergleichsoperatoren auswählen können. R bietet euch hier die Standardoperatoren: &gt; (größer) &gt;= (größer gleich) &lt; (kleiner) &lt;= (kleiner gleich) != (nicht gleich) ==(gleich) Anmerkung: Es gibt auch noch logische Operatoren, also und, oder etc. Diese Besprechen wir nicht im Detail, da das sonst zu viel würde. Die Logik der Anwendungen ist aber genau gleich wie bei den Vergleichsoperatoren, hier nur der Vollstädigkeit halber eine übersicht über diese Operatoren: Logische Operatoren in R Beispiel # Wenn wir zum Beispiel wissen wollen, wer die größten und schwersten Charaktere aus Starwars sind, dann könnten wir dies so machen: filter(starwars, height &gt; 190, mass &gt; 90) ## # A tibble: 6 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Darth Vader 202 136 none white yellow 41.9 male mascu~ ## 2 Chewbacca 228 112 brown unknown blue 200 male mascu~ ## 3 IG-88 200 140 none metal red 15 none mascu~ ## 4 Dexter Jettster 198 102 none brown yellow NA male mascu~ ## 5 Grievous 216 159 none brown, wh~ green, y~ NA male mascu~ ## 6 Tarfful 234 136 brown brown blue NA male mascu~ ## # ... with 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; # Wir filtern hier alle heraus, die größer sind als 190 und mehr als 90 Kilo wiegen Wenn man mit Strings arbeitet sucht man häufig nach bestimmen pattern in den Strings, wie hier bei den Namen. Wollen wir nun alle Skywalkers filtern, müssen wir die grepl() Funktion aus R nutzen. Diese prüft, ob eine Zeichenfolge vorhanden ist oder nicht und gibt dann entsprechend TRUE oder FALSE aus, also perfekt für filter() . Bei Strings die nur aus einem Wort bestehen, funktioniert aber auch filter(starwars, species==\"human\"). Beispiel: filter(starwars, species == &quot;Human&quot;) ## # A tibble: 35 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Luke Skywa~ 172 77 blond fair blue 19 male mascul~ ## 2 Darth Vader 202 136 none white yellow 41.9 male mascul~ ## 3 Leia Organa 150 49 brown light brown 19 fema~ femini~ ## 4 Owen Lars 178 120 brown, grey light blue 52 male mascul~ ## 5 Beru White~ 165 75 brown light blue 47 fema~ femini~ ## 6 Biggs Dark~ 183 84 black light brown 24 male mascul~ ## 7 Obi-Wan Ke~ 182 77 auburn, wh~ fair blue-gray 57 male mascul~ ## 8 Anakin Sky~ 188 84 blond fair blue 41.9 male mascul~ ## 9 Wilhuff Ta~ 180 NA auburn, gr~ fair blue 64 male mascul~ ## 10 Han Solo 180 80 brown fair brown 29 male mascul~ ## # ... with 25 more rows, and 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; # Alle Helden, mit dem Nachnamen Skywalker filter(starwars, grepl(&quot;Skywalker&quot;, name)) ## # A tibble: 3 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Luke Skywal~ 172 77 blond fair blue 19 male mascul~ ## 2 Anakin Skyw~ 188 84 blond fair blue 41.9 male mascul~ ## 3 Shmi Skywal~ 163 NA black fair brown 72 female femini~ ## # ... with 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; # Es wird im Datensatz starwars nach dem String &quot;Skywalker&quot; in der Spalte name gesucht. # Das Ergebnis sieht dann so aus: Wichtig ist natürlich für uns auch der Umgang mit Faktoren. Glücklicherweise ist das viel einfacher als mit Strings: # Wenn wir nun nach einem bestimmten Faktor-Level Filtern wollen geht das genauso wie mit numerischen Werten: filter(starwars, sex == &quot;male&quot;) ## # A tibble: 60 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Luke Skywa~ 172 77 blond fair blue 19 male mascul~ ## 2 Darth Vader 202 136 none white yellow 41.9 male mascul~ ## 3 Owen Lars 178 120 brown, grey light blue 52 male mascul~ ## 4 Biggs Dark~ 183 84 black light brown 24 male mascul~ ## 5 Obi-Wan Ke~ 182 77 auburn, wh~ fair blue-gray 57 male mascul~ ## 6 Anakin Sky~ 188 84 blond fair blue 41.9 male mascul~ ## 7 Wilhuff Ta~ 180 NA auburn, gr~ fair blue 64 male mascul~ ## 8 Chewbacca 228 112 brown unknown blue 200 male mascul~ ## 9 Han Solo 180 80 brown fair brown 29 male mascul~ ## 10 Greedo 173 74 &lt;NA&gt; green black 44 male mascul~ ## # ... with 50 more rows, and 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; 3.13 Übung 1 Filtert nun selbst den Datensatz nach bestimmten Kriterien # 1.) Filtert alle Helden, die Älter sind als 20 und größer als 160 sind fat_starwars &lt;- filter(starwars, Age &gt; 20, height &gt; 160) # 2.) Filtert alle Helden, die Blaue Augen haben und männlich sind filter(starwars, eye_color == &quot;blue&quot;, sex == &quot;male&quot;) ## # A tibble: 12 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Luke Skywa~ 172 77 blond fair blue 19 male mascul~ ## 2 Owen Lars 178 120 brown, grey light blue 52 male mascul~ ## 3 Anakin Sky~ 188 84 blond fair blue 41.9 male mascul~ ## 4 Wilhuff Ta~ 180 NA auburn, gr~ fair blue 64 male mascul~ ## 5 Chewbacca 228 112 brown unknown blue 200 male mascul~ ## 6 Jek Tono P~ 180 110 brown fair blue NA male mascul~ ## 7 Lobot 175 79 none light blue 37 male mascul~ ## 8 Qui-Gon Ji~ 193 89 brown fair blue 92 male mascul~ ## 9 Finis Valo~ 170 NA blond fair blue 91 male mascul~ ## 10 Mas Amedda 196 NA none blue blue NA male mascul~ ## 11 Cliegg Lars 183 NA brown fair blue 82 male mascul~ ## 12 Tarfful 234 136 brown brown blue NA male mascul~ ## # ... with 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; # 3.) Filtert alle, die zur Spezies Droid gehören filter(starwars, species==&quot;Droid&quot;) ## # A tibble: 6 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none masculine ## 2 R2-D2 96 32 &lt;NA&gt; white, blue red 33 none masculine ## 3 R5-D4 97 32 &lt;NA&gt; white, red red NA none masculine ## 4 IG-88 200 140 none metal red 15 none masculine ## 5 R4-P17 96 NA none silver, red red, blue NA none feminine ## 6 BB8 NA NA none none black NA none masculine ## # ... with 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; 3.14 Dplyr: Der Piping Operator Jetzt wisst ihr, wie man Daten filtert. Das ist aber nur eine der Basisfunktionen von dplyr. Die vielleicht wichtigste Funktion der sogenannte piping operator %&gt;% Mit diesem könnt ihr die Befehle kombinieren, oder auch verketten um die Datensätze nach euren Wünschen umzugestalten. Das funktioniert auch immer nach den oben genannten Prinzipien: Das erste Argument ist ein Dataframe. Die nachfolgenden Argumente beschreiben, was mit dem Dataframe geschehen soll, wobei die Variablennamen (ohne Anführungszeichen) verwendet werden. Das Ergebnis ist ein neuer Dataframe Wir werden hier erstmal nur die basis dplyr-Funktionen besprechen. Aber auch alle anderen Befehle lassen sich in eine Pipeline integrieren. Hier mal ein sehr fortgeschrittenes Beispiel, wie das aussehen kann: # df_clean %&gt;% group_by(N,K,Retrievals) %&gt;% # summarise(corA = cor(mu_est_a, mu_real_a), # corC = cor(mu_est_c, mu_real_c)) %&gt;% # mutate(z_a = fisherz(corA), z_c = fisherz(corC)) %&gt;% # filter(Retrievals== 100) %&gt;% # group_by(N,K) %&gt;% # summarise(mean_a_100 = mean(z_a), # mean_c_100 = mean(z_c), # range_cor = range(mean_a_100), # range_cor = range(mean_a_100)) %&gt;% # mutate(meanCorA_100 = fisherz2r(mean_a_100), # meanCorC_100 = fisherz2r(mean_c_100)) %&gt;% # select(-c(mean_a_100, mean_c_100)) 3.15 Beispiel Stellt euch vor, ihr wollte gerne den Mittelwert des Alters der Helden aus dem Starwars Datensatz berechnen, und das für unterschiedliche Heimatwelten und Spezies: # Dazu benutzen wir den Piping Operator %&gt;%, um die Befehle zu verketten: starwars %&gt;% group_by(species, homeworld) %&gt;% summarise(mean_Age=mean(Age)) ## `summarise()` has grouped output by &#39;species&#39;. You can override using the `.groups` argument. ## # A tibble: 58 x 3 ## # Groups: species [38] ## species homeworld mean_Age ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Aleena Aleen Minor NA ## 2 Besalisk Ojom NA ## 3 Cerean Cerea 92 ## 4 Chagrian Champala NA ## 5 Clawdite Zolan NA ## 6 Droid Naboo 33 ## 7 Droid Tatooine NA ## 8 Droid &lt;NA&gt; NA ## 9 Dug Malastare NA ## 10 Ewok Endor 8 ## # ... with 48 more rows Wir schreiben hier im Prinzip: Nehme den Datensatz starwars (1. Zuerst der Dataframe): `starwars %&gt;%` Gruppiere diesen nach Spezies und Heimatwelt (1. Verarbeitungsschritt): `group_by(species, homeworld) %&gt;%` Berechne dann für jede dieser Gruppen den Mittelwert für die Variable Age (2. Schritt): `summarise(meanAge=mean(Age)` Da wir nun den Piping Operator benutzen der vom Dataframe starwars ausgeht, müssen wir auch nicht mehr bei jedem Befehl den Datensatz angeben, es reicht dies am Anfang der Pipeline zu tun. Problem: Wir haben noch viele fehlende Beobachtungen. Diese müssen wir zunächst entfehrnen. Auch das können wir nun innerhalb der Pipeline tun. Dazu bietet R den Befehl drop_na() an. Dieser entfehrnt alle fehlenden Werte eines Datensatzes. Wir müssen diesen Befehl nun einfach an eine Stelle in der Pipe einfügen, an der es Sinn macht, die Fehlenden Werte zu entfehrnen: # Wo könnte das hier sein ? starwars %&gt;% drop_na() %&gt;% group_by(species, homeworld) %&gt;% summarise(mean_Age=mean(Age)) ## `summarise()` has grouped output by &#39;species&#39;. You can override using the `.groups` argument. ## # A tibble: 21 x 3 ## # Groups: species [11] ## species homeworld mean_Age ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Cerean Cerea 92 ## 2 Ewok Endor 8 ## 3 Gungan Naboo 52 ## 4 Human Alderaan 19 ## 5 Human Bespin 37 ## 6 Human Concord Dawn 66 ## 7 Human Corellia 25 ## 8 Human Haruun Kal 72 ## 9 Human Kamino 31.5 ## 10 Human Naboo 64 ## # ... with 11 more rows Nun haben wir nach verschiedenen Gruppen die Altersmittelwerte, bereinigt von den fehlenden Werten. Und das mit nur 2 Zeilen Code :) 3.16 Übung 2 # 1.) Gruppiert die Daten nach der Haarfarbe und berechnet für alle vollständigen Werte den Mittelwert und die Standardabweichung für die Größe und das Gewicht. Benutzt dafür wie im vorigen Beispiel die summarise() Funktion. Mit dieser könnt ihr auch mehrere Variablen berechnen. Bindet auch den drop_na() ein. Am Ende sollte es keine NA-Werte mehr in der Ausgabe geben. starwars %&gt;% drop_na() %&gt;% group_by(hair_color) %&gt;% summarise(mean_Height = mean(height), sd_Height= sd(height), mean_Mass = mean(mass), sd_Mass = sd(mass)) ## # A tibble: 8 x 5 ## hair_color mean_Height sd_Height mean_Mass sd_Mass ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 auburn, white 182 NA 77 NA ## 2 black 177 7.46 71.1 14.2 ## 3 blond 180 11.3 80.5 4.95 ## 4 brown 164. 41.6 65.4 29.9 ## 5 brown, grey 178 NA 120 NA ## 6 grey 170 NA 75 NA ## 7 none 186. 9.50 86.2 24.3 ## 8 white 196. 3.54 81 1.41 3.17 Dplyr : Neue Variablen mit mutate() berechnen Der letzte wichtige Befehl in dplyr ist mutate() bzw. across(). Letztes mal haben wir in dem Beispiel der Matrix zwei Variablen miteinander kombiniert und daraus einen neue berechnet (Größe*5). Mit mutate() können wir eine Variable und mit across() gleich mehrere Variablen umformen, oder neu berechnen. Hier möchte ich es am Beispiel einer z-Tranformation erläutern. Diese werden wir mit dem Befehl scale() tun, der standardmäßig in R vorhanden ist. 3.18 Beispiel starwars %&gt;% select(height,mass) %&gt;% mutate(z_height = scale(height), z_mass = scale(mass)) %&gt;% drop_na() ## # A tibble: 59 x 4 ## height mass z_height[,1] z_mass[,1] ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 172 77 -0.0678 -0.120 ## 2 167 75 -0.212 -0.132 ## 3 96 32 -2.25 -0.385 ## 4 202 136 0.795 0.228 ## 5 150 49 -0.701 -0.285 ## 6 178 120 0.105 0.134 ## 7 165 75 -0.269 -0.132 ## 8 97 32 -2.22 -0.385 ## 9 183 84 0.249 -0.0786 ## 10 182 77 0.220 -0.120 ## # ... with 49 more rows starwars %&gt;% select(height,mass) %&gt;% mutate(across(c(height,mass), list(z=scale))) %&gt;% drop_na() ## # A tibble: 59 x 4 ## height mass height_z[,1] mass_z[,1] ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 172 77 -0.0678 -0.120 ## 2 167 75 -0.212 -0.132 ## 3 96 32 -2.25 -0.385 ## 4 202 136 0.795 0.228 ## 5 150 49 -0.701 -0.285 ## 6 178 120 0.105 0.134 ## 7 165 75 -0.269 -0.132 ## 8 97 32 -2.22 -0.385 ## 9 183 84 0.249 -0.0786 ## 10 182 77 0.220 -0.120 ## # ... with 49 more rows In diesem Beispiel haben wir zunächste nur height und mass mit dem select() Befehl ausgewählt, daher werden auch nur diese beiden Spalten am Ende der Pipline im Datensatz angezeigt. Dies kann hilfreich sein, wenn man einen Datensatz mit sehr vielen Variablen analysieren muss, von denen nur einige wenige interessant sind. Dies ist meiner Erfahrung nach zum Beispiel bei Fragebögen der Fall, die unterschiedliche Facetten erfassen. Der nächste Befehl mutate() besteht immer aus einer Operation, die mit einer Spalte im Datensatz durchgeführt wird. Im Beispiel oben fügen wir also die Spalten z_height und z_mass hinzu, die sich jeweils aus scale(SPALTENNAME) berechnen und die z-Werte der jeweiligen Variablen berechnen. Wir können auch anstatt die Variablen einzeln umzurechnen, den Befehl scale() direkt auf mehrere Spalten anwenden. Dazu können wir den across() Befehl verwenden. Hier müssen wir innerhalb von mutate() einfach mit across(c(SPALTE1, SPALTE2)) einen Vektor der gewünschten Spalten übergeben und dann die Funktion(en), welche auf die Spalten angewand werden soll. Dies muss dann so definiert werden: mutate(across(c(height,mass), list(z=scale))) Diese Schreibweise hat den Vorteil das ihr In der list() mehrere Befehle übergeben könnt Die Originalspalten beibehalten werden Ihr den neuen Spalten direkt einen Suffix geben könnt. Dieser wird automatisch als _suffix an die neue Variable angehängt. mutate(across(c(height,mass), list(z=scale))) würde also zusätzliche zu Spalte1 und Spalte2 noch Spalte1_z und Spalte2_z, die den z-Wert der jeweiligen Variablen 3.19 Aufgabe bis zum nächsten Mal Übersetzt diese Anweisungen in dplyr-Sprache: Dataframe starwars Gruppiert diesen nach Spezies Entfehrnt alle fehlenden Werte Fasst die Variablen Age und Height zu nur einem Mittelwert zusammen z-Transformiert die Mittelwerte beider Spalten. Befehle die Ihr dazu braucht: drop_na(), across() ,scale(), mutate(), group_by(), summarise(), mean() Wenn ihr es Richtig gemacht habt, sollte der Datensatz am Ende so aussehen: Zusatzaufgabe: Ihr könnt den summarise() Befehl auch mit across() umsetzen und automatisch einen Suffix für die zusammengefassten Variablen erstellen, hierdurch spart man sich einige Tipparbeit. Das Ergebnis ist das gleiche, nur mit unterschiedlichen Spaltenamen für die mean Variablen. starwars %&gt;% group_by(species) %&gt;% drop_na() %&gt;% summarise(mean_Age = mean(Age), mean_Height = mean(height)) %&gt;% mutate(mean_Age_z = scale(mean_Age), mean_Height_z = scale(mean_Height)) ## # A tibble: 11 x 5 ## species mean_Age mean_Height mean_Age_z[,1] mean_Height_z[,1] ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cerean 92 198 0.622 0.561 ## 2 Ewok 8 88 -1.03 -2.66 ## 3 Gungan 52 196 -0.166 0.503 ## 4 Human 45.5 178 -0.293 -0.0239 ## 5 Kel Dor 22 188 -0.757 0.269 ## 6 Mirialan 49 168 -0.225 -0.317 ## 7 Mon Calamari 41 180 -0.382 0.0346 ## 8 Trandoshan 53 190 -0.146 0.327 ## 9 Twi&#39;lek 48 178 -0.245 -0.0239 ## 10 Wookiee 200 228 2.75 1.44 ## 11 Zabrak 54 175 -0.126 -0.112 # mit across() starwars %&gt;% group_by(species) %&gt;% drop_na() %&gt;% summarise(across(c(Age, height), list(mean= mean))) %&gt;% mutate(across(c(Age_mean, height_mean), list(z=scale))) ## # A tibble: 11 x 5 ## species Age_mean height_mean Age_mean_z[,1] height_mean_z[,1] ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cerean 92 198 0.622 0.561 ## 2 Ewok 8 88 -1.03 -2.66 ## 3 Gungan 52 196 -0.166 0.503 ## 4 Human 45.5 178 -0.293 -0.0239 ## 5 Kel Dor 22 188 -0.757 0.269 ## 6 Mirialan 49 168 -0.225 -0.317 ## 7 Mon Calamari 41 180 -0.382 0.0346 ## 8 Trandoshan 53 190 -0.146 0.327 ## 9 Twi&#39;lek 48 178 -0.245 -0.0239 ## 10 Wookiee 200 228 2.75 1.44 ## 11 Zabrak 54 175 -0.126 -0.112 "],["deskreptive-statistik.html", "4 Deskreptive Statistik", " 4 Deskreptive Statistik (Jose) "],["graphiken.html", "5 Graphiken", " 5 Graphiken (Cordula) "],["tipps.html", "6 Tipps 6.1 chapters 6.2 A section 6.3 cross-referenc: Chapters and sub-chapters 6.4 Captioned figures and tables 6.5 Footnotes 6.6 Citations 6.7 Equations 6.8 Theorems and proofs 6.9 Callout blocks", " 6 Tipps 6.1 chapters All chapters start with a first-level heading followed by your chapter title, like the line above. There should be only one first-level heading (#) per .Rmd file. 6.2 A section All chapter sections start with a second-level (##) or higher heading followed by your section title, like the sections above and below here. You can have as many as you want within a chapter. An unnumbered section Chapters and sections are numbered by default. To un-number a heading, add a {.unnumbered} or the shorter {-} at the end of the heading, like in this section. 6.3 cross-referenc: Chapters and sub-chapters There are two steps to cross-reference any heading: Label the heading: # Hello world {#nice-label}. Leave the label off if you like the automated heading generated based on your heading title: for example, # Hello world = # Hello world {#hello-world}. To label an un-numbered heading, use: # Hello world {-#nice-label} or {# Hello world .unnumbered}. Next, reference the labeled heading anywhere in the text using \\@ref(nice-label); for example, please see Chapter ??. If you prefer text as the link instead of a numbered reference use: any text you want can go here. 6.4 Captioned figures and tables Figures and tables with captions can also be cross-referenced from elsewhere in your book using \\@ref(fig:chunk-label) and \\@ref(tab:chunk-label), respectively. See Figure 6.1. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 6.1: Here is a nice figure! Dont miss Table 6.1. knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 6.1: Here is a nice table! temperature pressure 0 0.0002 20 0.0012 40 0.0060 60 0.0300 80 0.0900 100 0.2700 120 0.7500 140 1.8500 160 4.2000 180 8.8000 6.5 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one.1 6.6 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2021) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations 6.7 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{6.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (6.1). 6.8 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 6.1. Theorem 6.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 6.9 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html References "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
=======
[["index.html", "R Kurs Unterlagen 1 Über dieses Buch", " R Kurs Unterlagen Anna-Lena Schubert, Jan Goettmann, Jose Carlos Garcia Alanis, Meike Steinhilber, Cordula Hunt, Florian Kobylka 2021-10-13 1 Über dieses Buch TEXT "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
>>>>>>> add docs/ to .gitignore
