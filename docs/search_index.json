<<<<<<< refs/remotes/upstream/main
[["einführung.html", "7 Einführung 7.1 Installation 7.2 Erste Schritte 7.3 Das R-Skript 7.4 Struktur des Skripts 7.5 Pakete 7.6 Working Directory", " 7 Einführung 7.1 Installation Um R nutzen zu können, müssen Sie sich sowohl R als auch R-Studio installieren. R ist eine Open-Source-Software, die zur Datenanalyse genutzt wird. Die große Stärke von R in der Verfügbarkeit zahlreicher Zusatzfunktionen, in Form sogenannter Packages. Entwickler:innen überall auf der Welt bieten Packages fals Lösungen für die unterschiedlichsten Probleme an, von der Datenaufbereitung über APA-formatierten Tabellen bis hin zu zahlreichen statistischen Analysen. Laden Sie sich R unter dem folgenden Link herunter und installieren Sie sich das Programm auf Ihrem PC/Laptop: https://cran.r-project.org/ Außerdem benötigen Sie noch R-Studio. R-Studio ist eine integrierte Entwicklungsumgebung (engl: integrated development environment; IDE), die es deutlich einfacher macht, mit R zu arbeiten. Installieren Sie sich daher auch R-Studio auf Ihrem PC/Laptop, indem Sie folgendem Link folgen: https://www.rstudio.com/products/rstudio/download/#download 7.2 Erste Schritte Nachdem Sie R und R-Studio installiert haben, können Sie Ihre ersten Schritte in R machen. Öffnen Sie dazu R-Studio und geben Sie etwas in das Feld Konsole (oder Console) ein. Im Normalfall finden Sie die Konsole in der Anzeige auf der linken Seite (ggfs. befindet sich die Konsole auch links unten). Sie erkennen die Konsole daran, dass die Zeile, in die Sie etwas eingeben können, mit &gt; beginnt. Diese Klammer fordert Sie auf, R-Code einzugeben! Geben Sie Folgendes in die Konsole ein: &gt; &quot;Hallo R!&quot; Wenn folgende Ausgabe erscheint, hat die Installation funktioniert: ## [1] &quot;Hallo R!&quot; Sie können auch Zahlen in die Konsole eingeben: 42 ## [1] 42 Jetzt können Sie R schon als einfachen Taschenrechner benutzen! Addition: 3+2 ## [1] 5 Subtraktion: 3-2 ## [1] 1 Multiplikation: 3*2 ## [1] 6 Division: 3/2 ## [1] 1.5 Beachten Sie dabei, dass Sie auch Klammern setzen können: (3+2)*5 ## [1] 25 7.3 Das R-Skript In der Regel werden Sie Ihre Analysen nicht direkt in die Konsole eingeben, sondern ein Skript schreiben, in dem Sie Ihre Analysen dokumentieren. Dieses Skript dokumentiert Ihre Analysen, was den großen Vorteil hat, dass Ihre Analysen dadurch reproduzierbar werden. Wenn Sie Daten aufbereiten oder analysieren und dabei unterbrochen werden, können Sie sich - auch noch Tage oder Wochen später - einfach wieder an das Skript setzen, die bisherigen Analyseschritte erneut ausführen und dort weitermachen. So können Sie Ihre Analysen auch mit anderen Studierenden oder Lehrenden, die ein Projekt betreuen, teilen. Viele Forschende laden ihre R-Skripte regelmäßig ins Open Science Framework (OSF) hoch, wenn sie Artikel zur Begutachtung einreichen, damit andere ihren Code und ihre Analysen auf Fehler überprüfen und nachvollziehen können. Um ein solches Skript zu erstellen, nutzen wir den in R-Studio verfügbaren Texteditor. Sie können ein neues Skript unter Datei \\(\\to\\) NeueDatei \\(\\to\\) R Skript (File \\(\\to\\) New File \\(\\to\\) R Script öffnen. Skripte, die R-Code enthalten, speichern wir mit der Dateiendung .r oder .R ab. Das Praktische: Wenn Sie Code im Skript schreiben, können Sie diesen Code direkt ausführen. Wenn sich Ihr Cursor in einer Zeile befindet, in der Code steht, können Sie STRG-Enter drücken (oder oben auf das Run-Symbol klicken), um diese Zeile auszuführen. Wenn Sie einen Teil des Skripts markieren, wird nur genau dieser Teil ausgeführt, wenn Sie STRG-Enter drücken. Das Ergebnis wird Ihnen wie gewohnt in der Konsole angezeigt. 7.4 Struktur des Skripts Nichts ist wichtiger als gute Organisation! Damit Sie sich auch später noch daran erinnern, welche Analysen Sie durchgeführt haben, können (und sollten) Sie sich Kommentare ins Skript schreiben. In R wird # benutzt, um Code zu kommentieren. Wenn Sie # vor Code setzen, wird dieser Code beim Ausführen einfach ignoriert! So können Sie sich ganze Abschnitte dazu notieren, welche Analysen Sie gemacht haben, was Kernbefunde waren, usw., ohne dass Sie Probleme beim Ausführen Ihres Skriptes bekommen. Sie sollten Ihren Code immer kommentieren, um sich auch später noch daran erinnern zu können, was Sie vor einiger Zeit geschrieben haben. # 3+2 # Nichts passiert - die Rechnung wurde nicht ausgeführt, weil sie auskommentiert ist Sie können Kommentare auch nutzen, um das Skript in Abschnitte zu gliedern. Wenn Sie hinter ein # noch ein - setzen, fügt der Editor einen logischen Abschnitt ein, den Sie ein- oder ausklappen können. Das ist insbesondere zur Strukturierung längerer Skripte enorm hilfreich. 7.5 Pakete Für R gibt es unzählige nützliche Pakete, die von Entwickler:innen auf der ganzen Welt weiterentwickelt werden. Auch an der JGU werden R-Pakete entwickelt! Diese Pakete erweitern das Grundprogramm und geben Ihnen Tools an die Hand, die Ihnen bei der Bearbeitung ganz konkreter Fragestellungen helfen können. Das Paket psych wurde von William Revelle entwickelt, um verschiedene Funktionen zu bündeln, die für verschiedene psychologische Fragestellungen nützlich sind. Installieren Sie das Paket mit der Funktion install.packages(). install.packages(&quot;psych&quot;) Sobald Sie das Paket installiert haben, müssen Sie es nur noch laden, um es nutzen zu können: library(psych) Und schon haben Sie Ihr erstes Paket installiert und geladen! Sobald Sie ein Paket auf Ihrem PC/Laptop installiert haben, können Sie es immer wieder verwenden. Beachten Sie aber unbedingt, dass Sie Pakete nach jedem Neustart von R neu einladen müssen. Wenn Sie keine Idee haben, welche Funktionen ein Paket umfasst und wofür es nützlich sein könnte, können Sie ganz einfach die Hilfe-Funktion nutzen, die Sie aufrufen können, indem Sie ein Fragezeichen vor den Paketnamen setzen. ?(psych) 7.6 Working Directory Wenn Sie in R arbeiten, arbeiten Sie immer in einem Verzeichnis - einem sog. working directory. Sie können sich Ihr aktuelles working directory mit dem Befehl getwd() anzeigen lassen. getwd() ## [1] &quot;C:/Users/amd_ad/Documents/R-Kurs-Buch&quot; In der Regel werden Sie für jedes Projekt ein eigenes working directory anlegen, in dem Sie die Daten und Skripte speichern, die zu dem Projekt gehören. Um in das richtige Verzeichnis zu wechseln, können Sie den Befehl setwd() nutzen. Noch einfacher geht es per Mausklick über Session  Set Working Directory  Choose Directory. Tipp: Wenn Sie bereits ein Verzeichnis für Ihr Projekt angelegt und dort ein Skript gespeichert haben (wichtig: es muss unbedingt im Verzeichnis gespeichert sein!), können Sie mit folgendem Codeschnipsel ganz einfach ihr working directory dorthin legen, wo Ihr aktuelles Skript gespeichert ist. Das ist auch dann enorm praktisch, wenn Sie Ihre Skripte mit anderen austauschen! Dazu müssen Ihr allerdings zunächst das Paket rstudioapi installieren. install.packages(&quot;rstudioapi) setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
=======
[["index.html", "R Kurs Unterlagen 1 Über dieses Buch", " R Kurs Unterlagen Anna-Lena Schubert, Jan Goettmann, Jose Carlos Garcia Alanis, Meike Steinhilber, Cordula Hunt, Florian Kobylka 2021-10-13 1 Über dieses Buch TEXT "],["einführung.html", "2 Einführung", " 2 Einführung (Anna-Lena) "],["datenstruktur.html", "3 Datenstruktur 3.1 Einführung in Dplyr und tidyverse 3.2 Dplyr: Die wichtigsten Befehle 3.3 Übung 1 3.4 Dplyr: Der Piping Operator 3.5 Beispiel 3.6 Übung 2 3.7 Dplyr : Neue Variablen mit mutate() berechnen 3.8 Beispiel 3.9 Aufgabe bis zum nächsten Mal", " 3 Datenstruktur (Florian) 3.1 Einführung in Dplyr und tidyverse Dplyr ist Teil des tidyverse Packages und ermöglicht es, Daten sehr einfach zu manipulieren und in eine Form zu bringen, um diese dann zu analysieren. Um das zu tun greifen wir auf den Star Wars Datensatz zurück, den das dplyr Package mitliefert: # Lest die Daten bitte ein, der Datensatz heisst &quot;starwars.RDS&quot; und befindet sich in eurem Projektordner, diesmal benutzen wir den readRDS() Befehl. starwars &lt;- readRDS(&quot;starwars.RDS&quot;) Der Datensatz enthält Informationen über unsere Star Wars Helden, ähnlich dem Datensatz, den wir uns in der letzten Sitzung ausgedacht haben: head(starwars,5) # Wir lassen uns erstmal die ersten 5 Zeilen des Datensatzes ausgeben ## # A tibble: 5 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Luke Skywalker 172 77 blond fair blue 19 male mascu~ ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu~ ## 3 R2-D2 96 32 &lt;NA&gt; white, blue red 33 none mascu~ ## 4 Darth Vader 202 136 none white yellow 41.9 male mascu~ ## 5 Leia Organa 150 49 brown light brown 19 fema~ femin~ ## # ... with 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; Bevor wir einsteigen, schaut euch an, wie die einzelnen Variablen im Datensatz verteilt sind. Benutzt dazu den den summary() Befehl, was fällt euch auf ? summary(starwars) ## name height mass hair_color skin_color ## Length:87 Min. : 66.0 Min. : 15.00 none :37 fair :17 ## Class :character 1st Qu.:167.0 1st Qu.: 55.60 brown :18 light :11 ## Mode :character Median :180.0 Median : 79.00 black :13 dark : 6 ## Mean :174.4 Mean : 97.31 white : 4 green : 6 ## 3rd Qu.:191.0 3rd Qu.: 84.50 blond : 3 grey : 6 ## Max. :264.0 Max. :1358.00 (Other): 7 pale : 5 ## NA&#39;s :6 NA&#39;s :28 NA&#39;s : 5 (Other):36 ## eye_color Age sex gender ## brown :21 Min. : 8.00 female :16 feminine :17 ## blue :19 1st Qu.: 35.00 hermaphroditic: 1 masculine:66 ## yellow :11 Median : 52.00 male :60 NA&#39;s : 4 ## black :10 Mean : 87.57 none : 6 ## orange : 8 3rd Qu.: 72.00 NA&#39;s : 4 ## red : 5 Max. :896.00 ## (Other):13 NA&#39;s :44 ## homeworld species ## Length:87 Length:87 ## Class :character Class :character ## Mode :character Mode :character ## ## ## ## 3.2 Dplyr: Die wichtigsten Befehle Filtern von Beobachtungen nach Wert (filter()). Reihen neu Sortieren (arrange()). Auswahl von Variablen nach Name (select()). Erstellen von neuen Variablen aus bereits existierenden (mutate()). Viele Werte zu einem einzelnen Wert zusammenfassen (summarise()). Der vielleicht wichtigste Befehl ist der group_by() Befehl, mit dem Ihr die oben genannten Befehle auf einzelne Gruppen innerhalb eines Datensatzes anwenden könnt. Diese 6 sogennaten Verben bilden die Grundlage für tidyverse.Damit ist es möglichmehrere einfache Schritte miteinander zu verketten, um ein komplexes Ergebnis zu erzielen. Alles Befehle funktionieren auf die gleiche Art und Weise: Das erste Argument ist ein Dataframe. Die nachfolgenden Argumente beschreiben, was mit dem Dataframe geschehen soll, wobei die Variablennamen (ohne Anführungszeichen) verwendet werden. Das Ergebnis ist ein neuer Dataframe Hier ein Beispiel, zum filter() Befehl, dazu müsst ihr auch wissen, wie Ihr die gewünschten Beobachtungen mit Hilfe der Vergleichsoperatoren auswählen können. R bietet euch hier die Standardoperatoren: &gt; (größer) &gt;= (größer gleich) &lt; (kleiner) &lt;= (kleiner gleich) != (nicht gleich) ==(gleich) Anmerkung: Es gibt auch noch logische Operatoren, also und, oder etc. Diese Besprechen wir nicht im Detail, da das sonst zu viel würde. Die Logik der Anwendungen ist aber genau gleich wie bei den Vergleichsoperatoren, hier nur der Vollstädigkeit halber eine übersicht über diese Operatoren: Logische Operatoren in R Beispiel # Wenn wir zum Beispiel wissen wollen, wer die größten und schwersten Charaktere aus Starwars sind, dann könnten wir dies so machen: filter(starwars, height &gt; 190, mass &gt; 90) ## # A tibble: 6 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Darth Vader 202 136 none white yellow 41.9 male mascu~ ## 2 Chewbacca 228 112 brown unknown blue 200 male mascu~ ## 3 IG-88 200 140 none metal red 15 none mascu~ ## 4 Dexter Jettster 198 102 none brown yellow NA male mascu~ ## 5 Grievous 216 159 none brown, wh~ green, y~ NA male mascu~ ## 6 Tarfful 234 136 brown brown blue NA male mascu~ ## # ... with 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; # Wir filtern hier alle heraus, die größer sind als 190 und mehr als 90 Kilo wiegen Wenn man mit Strings arbeitet sucht man häufig nach bestimmen pattern in den Strings, wie hier bei den Namen. Wollen wir nun alle Skywalkers filtern, müssen wir die grepl() Funktion aus R nutzen. Diese prüft, ob eine Zeichenfolge vorhanden ist oder nicht und gibt dann entsprechend TRUE oder FALSE aus, also perfekt für filter() . Bei Strings die nur aus einem Wort bestehen, funktioniert aber auch filter(starwars, species==\"human\"). Beispiel: filter(starwars, species == &quot;Human&quot;) ## # A tibble: 35 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Luke Skywa~ 172 77 blond fair blue 19 male mascul~ ## 2 Darth Vader 202 136 none white yellow 41.9 male mascul~ ## 3 Leia Organa 150 49 brown light brown 19 fema~ femini~ ## 4 Owen Lars 178 120 brown, grey light blue 52 male mascul~ ## 5 Beru White~ 165 75 brown light blue 47 fema~ femini~ ## 6 Biggs Dark~ 183 84 black light brown 24 male mascul~ ## 7 Obi-Wan Ke~ 182 77 auburn, wh~ fair blue-gray 57 male mascul~ ## 8 Anakin Sky~ 188 84 blond fair blue 41.9 male mascul~ ## 9 Wilhuff Ta~ 180 NA auburn, gr~ fair blue 64 male mascul~ ## 10 Han Solo 180 80 brown fair brown 29 male mascul~ ## # ... with 25 more rows, and 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; # Alle Helden, mit dem Nachnamen Skywalker filter(starwars, grepl(&quot;Skywalker&quot;, name)) ## # A tibble: 3 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Luke Skywal~ 172 77 blond fair blue 19 male mascul~ ## 2 Anakin Skyw~ 188 84 blond fair blue 41.9 male mascul~ ## 3 Shmi Skywal~ 163 NA black fair brown 72 female femini~ ## # ... with 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; # Es wird im Datensatz starwars nach dem String &quot;Skywalker&quot; in der Spalte name gesucht. # Das Ergebnis sieht dann so aus: Wichtig ist natürlich für uns auch der Umgang mit Faktoren. Glücklicherweise ist das viel einfacher als mit Strings: # Wenn wir nun nach einem bestimmten Faktor-Level Filtern wollen geht das genauso wie mit numerischen Werten: filter(starwars, sex == &quot;male&quot;) ## # A tibble: 60 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Luke Skywa~ 172 77 blond fair blue 19 male mascul~ ## 2 Darth Vader 202 136 none white yellow 41.9 male mascul~ ## 3 Owen Lars 178 120 brown, grey light blue 52 male mascul~ ## 4 Biggs Dark~ 183 84 black light brown 24 male mascul~ ## 5 Obi-Wan Ke~ 182 77 auburn, wh~ fair blue-gray 57 male mascul~ ## 6 Anakin Sky~ 188 84 blond fair blue 41.9 male mascul~ ## 7 Wilhuff Ta~ 180 NA auburn, gr~ fair blue 64 male mascul~ ## 8 Chewbacca 228 112 brown unknown blue 200 male mascul~ ## 9 Han Solo 180 80 brown fair brown 29 male mascul~ ## 10 Greedo 173 74 &lt;NA&gt; green black 44 male mascul~ ## # ... with 50 more rows, and 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; 3.3 Übung 1 Filtert nun selbst den Datensatz nach bestimmten Kriterien # 1.) Filtert alle Helden, die Älter sind als 20 und größer als 160 sind fat_starwars &lt;- filter(starwars, Age &gt; 20, height &gt; 160) # 2.) Filtert alle Helden, die Blaue Augen haben und männlich sind filter(starwars, eye_color == &quot;blue&quot;, sex == &quot;male&quot;) ## # A tibble: 12 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Luke Skywa~ 172 77 blond fair blue 19 male mascul~ ## 2 Owen Lars 178 120 brown, grey light blue 52 male mascul~ ## 3 Anakin Sky~ 188 84 blond fair blue 41.9 male mascul~ ## 4 Wilhuff Ta~ 180 NA auburn, gr~ fair blue 64 male mascul~ ## 5 Chewbacca 228 112 brown unknown blue 200 male mascul~ ## 6 Jek Tono P~ 180 110 brown fair blue NA male mascul~ ## 7 Lobot 175 79 none light blue 37 male mascul~ ## 8 Qui-Gon Ji~ 193 89 brown fair blue 92 male mascul~ ## 9 Finis Valo~ 170 NA blond fair blue 91 male mascul~ ## 10 Mas Amedda 196 NA none blue blue NA male mascul~ ## 11 Cliegg Lars 183 NA brown fair blue 82 male mascul~ ## 12 Tarfful 234 136 brown brown blue NA male mascul~ ## # ... with 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; # 3.) Filtert alle, die zur Spezies Droid gehören filter(starwars, species==&quot;Droid&quot;) ## # A tibble: 6 x 11 ## name height mass hair_color skin_color eye_color Age sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none masculine ## 2 R2-D2 96 32 &lt;NA&gt; white, blue red 33 none masculine ## 3 R5-D4 97 32 &lt;NA&gt; white, red red NA none masculine ## 4 IG-88 200 140 none metal red 15 none masculine ## 5 R4-P17 96 NA none silver, red red, blue NA none feminine ## 6 BB8 NA NA none none black NA none masculine ## # ... with 2 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt; 3.4 Dplyr: Der Piping Operator Jetzt wisst ihr, wie man Daten filtert. Das ist aber nur eine der Basisfunktionen von dplyr. Die vielleicht wichtigste Funktion der sogenannte piping operator %&gt;% Mit diesem könnt ihr die Befehle kombinieren, oder auch verketten um die Datensätze nach euren Wünschen umzugestalten. Das funktioniert auch immer nach den oben genannten Prinzipien: Das erste Argument ist ein Dataframe. Die nachfolgenden Argumente beschreiben, was mit dem Dataframe geschehen soll, wobei die Variablennamen (ohne Anführungszeichen) verwendet werden. Das Ergebnis ist ein neuer Dataframe Wir werden hier erstmal nur die basis dplyr-Funktionen besprechen. Aber auch alle anderen Befehle lassen sich in eine Pipeline integrieren. Hier mal ein sehr fortgeschrittenes Beispiel, wie das aussehen kann: # df_clean %&gt;% group_by(N,K,Retrievals) %&gt;% # summarise(corA = cor(mu_est_a, mu_real_a), # corC = cor(mu_est_c, mu_real_c)) %&gt;% # mutate(z_a = fisherz(corA), z_c = fisherz(corC)) %&gt;% # filter(Retrievals== 100) %&gt;% # group_by(N,K) %&gt;% # summarise(mean_a_100 = mean(z_a), # mean_c_100 = mean(z_c), # range_cor = range(mean_a_100), # range_cor = range(mean_a_100)) %&gt;% # mutate(meanCorA_100 = fisherz2r(mean_a_100), # meanCorC_100 = fisherz2r(mean_c_100)) %&gt;% # select(-c(mean_a_100, mean_c_100)) 3.5 Beispiel Stellt euch vor, ihr wollte gerne den Mittelwert des Alters der Helden aus dem Starwars Datensatz berechnen, und das für unterschiedliche Heimatwelten und Spezies: # Dazu benutzen wir den Piping Operator %&gt;%, um die Befehle zu verketten: starwars %&gt;% group_by(species, homeworld) %&gt;% summarise(mean_Age=mean(Age)) ## `summarise()` has grouped output by &#39;species&#39;. You can override using the `.groups` argument. ## # A tibble: 58 x 3 ## # Groups: species [38] ## species homeworld mean_Age ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Aleena Aleen Minor NA ## 2 Besalisk Ojom NA ## 3 Cerean Cerea 92 ## 4 Chagrian Champala NA ## 5 Clawdite Zolan NA ## 6 Droid Naboo 33 ## 7 Droid Tatooine NA ## 8 Droid &lt;NA&gt; NA ## 9 Dug Malastare NA ## 10 Ewok Endor 8 ## # ... with 48 more rows Wir schreiben hier im Prinzip: Nehme den Datensatz starwars (1. Zuerst der Dataframe): `starwars %&gt;%` Gruppiere diesen nach Spezies und Heimatwelt (1. Verarbeitungsschritt): `group_by(species, homeworld) %&gt;%` Berechne dann für jede dieser Gruppen den Mittelwert für die Variable Age (2. Schritt): `summarise(meanAge=mean(Age)` Da wir nun den Piping Operator benutzen der vom Dataframe starwars ausgeht, müssen wir auch nicht mehr bei jedem Befehl den Datensatz angeben, es reicht dies am Anfang der Pipeline zu tun. Problem: Wir haben noch viele fehlende Beobachtungen. Diese müssen wir zunächst entfehrnen. Auch das können wir nun innerhalb der Pipeline tun. Dazu bietet R den Befehl drop_na() an. Dieser entfehrnt alle fehlenden Werte eines Datensatzes. Wir müssen diesen Befehl nun einfach an eine Stelle in der Pipe einfügen, an der es Sinn macht, die Fehlenden Werte zu entfehrnen: # Wo könnte das hier sein ? starwars %&gt;% drop_na() %&gt;% group_by(species, homeworld) %&gt;% summarise(mean_Age=mean(Age)) ## `summarise()` has grouped output by &#39;species&#39;. You can override using the `.groups` argument. ## # A tibble: 21 x 3 ## # Groups: species [11] ## species homeworld mean_Age ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Cerean Cerea 92 ## 2 Ewok Endor 8 ## 3 Gungan Naboo 52 ## 4 Human Alderaan 19 ## 5 Human Bespin 37 ## 6 Human Concord Dawn 66 ## 7 Human Corellia 25 ## 8 Human Haruun Kal 72 ## 9 Human Kamino 31.5 ## 10 Human Naboo 64 ## # ... with 11 more rows Nun haben wir nach verschiedenen Gruppen die Altersmittelwerte, bereinigt von den fehlenden Werten. Und das mit nur 2 Zeilen Code :) 3.6 Übung 2 # 1.) Gruppiert die Daten nach der Haarfarbe und berechnet für alle vollständigen Werte den Mittelwert und die Standardabweichung für die Größe und das Gewicht. Benutzt dafür wie im vorigen Beispiel die summarise() Funktion. Mit dieser könnt ihr auch mehrere Variablen berechnen. Bindet auch den drop_na() ein. Am Ende sollte es keine NA-Werte mehr in der Ausgabe geben. starwars %&gt;% drop_na() %&gt;% group_by(hair_color) %&gt;% summarise(mean_Height = mean(height), sd_Height= sd(height), mean_Mass = mean(mass), sd_Mass = sd(mass)) ## # A tibble: 8 x 5 ## hair_color mean_Height sd_Height mean_Mass sd_Mass ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 auburn, white 182 NA 77 NA ## 2 black 177 7.46 71.1 14.2 ## 3 blond 180 11.3 80.5 4.95 ## 4 brown 164. 41.6 65.4 29.9 ## 5 brown, grey 178 NA 120 NA ## 6 grey 170 NA 75 NA ## 7 none 186. 9.50 86.2 24.3 ## 8 white 196. 3.54 81 1.41 3.7 Dplyr : Neue Variablen mit mutate() berechnen Der letzte wichtige Befehl in dplyr ist mutate() bzw. across(). Letztes mal haben wir in dem Beispiel der Matrix zwei Variablen miteinander kombiniert und daraus einen neue berechnet (Größe*5). Mit mutate() können wir eine Variable und mit across() gleich mehrere Variablen umformen, oder neu berechnen. Hier möchte ich es am Beispiel einer z-Tranformation erläutern. Diese werden wir mit dem Befehl scale() tun, der standardmäßig in R vorhanden ist. 3.8 Beispiel starwars %&gt;% select(height,mass) %&gt;% mutate(z_height = scale(height), z_mass = scale(mass)) %&gt;% drop_na() ## # A tibble: 59 x 4 ## height mass z_height[,1] z_mass[,1] ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 172 77 -0.0678 -0.120 ## 2 167 75 -0.212 -0.132 ## 3 96 32 -2.25 -0.385 ## 4 202 136 0.795 0.228 ## 5 150 49 -0.701 -0.285 ## 6 178 120 0.105 0.134 ## 7 165 75 -0.269 -0.132 ## 8 97 32 -2.22 -0.385 ## 9 183 84 0.249 -0.0786 ## 10 182 77 0.220 -0.120 ## # ... with 49 more rows starwars %&gt;% select(height,mass) %&gt;% mutate(across(c(height,mass), list(z=scale))) %&gt;% drop_na() ## # A tibble: 59 x 4 ## height mass height_z[,1] mass_z[,1] ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 172 77 -0.0678 -0.120 ## 2 167 75 -0.212 -0.132 ## 3 96 32 -2.25 -0.385 ## 4 202 136 0.795 0.228 ## 5 150 49 -0.701 -0.285 ## 6 178 120 0.105 0.134 ## 7 165 75 -0.269 -0.132 ## 8 97 32 -2.22 -0.385 ## 9 183 84 0.249 -0.0786 ## 10 182 77 0.220 -0.120 ## # ... with 49 more rows In diesem Beispiel haben wir zunächste nur height und mass mit dem select() Befehl ausgewählt, daher werden auch nur diese beiden Spalten am Ende der Pipline im Datensatz angezeigt. Dies kann hilfreich sein, wenn man einen Datensatz mit sehr vielen Variablen analysieren muss, von denen nur einige wenige interessant sind. Dies ist meiner Erfahrung nach zum Beispiel bei Fragebögen der Fall, die unterschiedliche Facetten erfassen. Der nächste Befehl mutate() besteht immer aus einer Operation, die mit einer Spalte im Datensatz durchgeführt wird. Im Beispiel oben fügen wir also die Spalten z_height und z_mass hinzu, die sich jeweils aus scale(SPALTENNAME) berechnen und die z-Werte der jeweiligen Variablen berechnen. Wir können auch anstatt die Variablen einzeln umzurechnen, den Befehl scale() direkt auf mehrere Spalten anwenden. Dazu können wir den across() Befehl verwenden. Hier müssen wir innerhalb von mutate() einfach mit across(c(SPALTE1, SPALTE2)) einen Vektor der gewünschten Spalten übergeben und dann die Funktion(en), welche auf die Spalten angewand werden soll. Dies muss dann so definiert werden: mutate(across(c(height,mass), list(z=scale))) Diese Schreibweise hat den Vorteil das ihr In der list() mehrere Befehle übergeben könnt Die Originalspalten beibehalten werden Ihr den neuen Spalten direkt einen Suffix geben könnt. Dieser wird automatisch als _suffix an die neue Variable angehängt. mutate(across(c(height,mass), list(z=scale))) würde also zusätzliche zu Spalte1 und Spalte2 noch Spalte1_z und Spalte2_z, die den z-Wert der jeweiligen Variablen 3.9 Aufgabe bis zum nächsten Mal Übersetzt diese Anweisungen in dplyr-Sprache: Dataframe starwars Gruppiert diesen nach Spezies Entfehrnt alle fehlenden Werte Fasst die Variablen Age und Height zu nur einem Mittelwert zusammen z-Transformiert die Mittelwerte beider Spalten. Befehle die Ihr dazu braucht: drop_na(), across() ,scale(), mutate(), group_by(), summarise(), mean() Wenn ihr es Richtig gemacht habt, sollte der Datensatz am Ende so aussehen: Zusatzaufgabe: Ihr könnt den summarise() Befehl auch mit across() umsetzen und automatisch einen Suffix für die zusammengefassten Variablen erstellen, hierdurch spart man sich einige Tipparbeit. Das Ergebnis ist das gleiche, nur mit unterschiedlichen Spaltenamen für die mean Variablen. starwars %&gt;% group_by(species) %&gt;% drop_na() %&gt;% summarise(mean_Age = mean(Age), mean_Height = mean(height)) %&gt;% mutate(mean_Age_z = scale(mean_Age), mean_Height_z = scale(mean_Height)) ## # A tibble: 11 x 5 ## species mean_Age mean_Height mean_Age_z[,1] mean_Height_z[,1] ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cerean 92 198 0.622 0.561 ## 2 Ewok 8 88 -1.03 -2.66 ## 3 Gungan 52 196 -0.166 0.503 ## 4 Human 45.5 178 -0.293 -0.0239 ## 5 Kel Dor 22 188 -0.757 0.269 ## 6 Mirialan 49 168 -0.225 -0.317 ## 7 Mon Calamari 41 180 -0.382 0.0346 ## 8 Trandoshan 53 190 -0.146 0.327 ## 9 Twi&#39;lek 48 178 -0.245 -0.0239 ## 10 Wookiee 200 228 2.75 1.44 ## 11 Zabrak 54 175 -0.126 -0.112 # mit across() starwars %&gt;% group_by(species) %&gt;% drop_na() %&gt;% summarise(across(c(Age, height), list(mean= mean))) %&gt;% mutate(across(c(Age_mean, height_mean), list(z=scale))) ## # A tibble: 11 x 5 ## species Age_mean height_mean Age_mean_z[,1] height_mean_z[,1] ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cerean 92 198 0.622 0.561 ## 2 Ewok 8 88 -1.03 -2.66 ## 3 Gungan 52 196 -0.166 0.503 ## 4 Human 45.5 178 -0.293 -0.0239 ## 5 Kel Dor 22 188 -0.757 0.269 ## 6 Mirialan 49 168 -0.225 -0.317 ## 7 Mon Calamari 41 180 -0.382 0.0346 ## 8 Trandoshan 53 190 -0.146 0.327 ## 9 Twi&#39;lek 48 178 -0.245 -0.0239 ## 10 Wookiee 200 228 2.75 1.44 ## 11 Zabrak 54 175 -0.126 -0.112 "],["deskreptive-statistik.html", "4 Deskreptive Statistik", " 4 Deskreptive Statistik (Jose) "],["graphiken.html", "5 Graphiken", " 5 Graphiken (Cordula) "],["tipps.html", "6 Tipps 6.1 chapters 6.2 A section 6.3 cross-referenc: Chapters and sub-chapters 6.4 Captioned figures and tables 6.5 Footnotes 6.6 Citations 6.7 Equations 6.8 Theorems and proofs 6.9 Callout blocks", " 6 Tipps 6.1 chapters All chapters start with a first-level heading followed by your chapter title, like the line above. There should be only one first-level heading (#) per .Rmd file. 6.2 A section All chapter sections start with a second-level (##) or higher heading followed by your section title, like the sections above and below here. You can have as many as you want within a chapter. An unnumbered section Chapters and sections are numbered by default. To un-number a heading, add a {.unnumbered} or the shorter {-} at the end of the heading, like in this section. 6.3 cross-referenc: Chapters and sub-chapters There are two steps to cross-reference any heading: Label the heading: # Hello world {#nice-label}. Leave the label off if you like the automated heading generated based on your heading title: for example, # Hello world = # Hello world {#hello-world}. To label an un-numbered heading, use: # Hello world {-#nice-label} or {# Hello world .unnumbered}. Next, reference the labeled heading anywhere in the text using \\@ref(nice-label); for example, please see Chapter ??. If you prefer text as the link instead of a numbered reference use: any text you want can go here. 6.4 Captioned figures and tables Figures and tables with captions can also be cross-referenced from elsewhere in your book using \\@ref(fig:chunk-label) and \\@ref(tab:chunk-label), respectively. See Figure 6.1. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 6.1: Here is a nice figure! Dont miss Table 6.1. knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 6.1: Here is a nice table! temperature pressure 0 0.0002 20 0.0012 40 0.0060 60 0.0300 80 0.0900 100 0.2700 120 0.7500 140 1.8500 160 4.2000 180 8.8000 6.5 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one.1 6.6 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2021) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations 6.7 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{6.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (6.1). 6.8 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 6.1. Theorem 6.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 6.9 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html References "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
>>>>>>> Bring das Buch ohne meine Änderungen auf den Stand von 21/10/13 11:00
